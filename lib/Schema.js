// Generated by CoffeeScript 1.7.1
var Chance, Schema, chance, root, typeOf, utils;

root = typeof exports !== "undefined" && exports !== null ? exports : this;

Chance = require('chance');

utils = require('../lib/coffee-utils');

typeOf = require('../lib/typeOf');

chance = new Chance();

Schema = (function() {
  function Schema(config) {
    var item, key, type;
    if (config) {
      for (key in config) {
        item = config[key];
        if (typeOf(item) === "[object String]") {
          if (key === 'type') {
            throw "Schema Error: The String of `" + key + "` NEVER HERE.";
          } else {
            if (this.exists(item)) {
              type = item;
              config[key] = utils.merge(this.get_type(type), {
                type: type
              });
            } else {
              throw "Schema Error: The String `" + item + "` of `" + key + "` is not a valid Schema type.";
            }
          }
        } else if (typeOf(item) === "[object Object]") {
          type = item.type;
          if (typeof type !== 'undefined') {
            if (!this.exists(type)) {
              throw "Schema Error: Invalid schema type " + item + " of `" + key + "`";
            } else {
              config[key] = utils.merge(this.get_type(type), item, {
                type: type
              });
            }
          } else {
            config[key] = new Schema(item);
          }
        } else {
          throw "Schema Error: Unknown schema Type `" + item + "` of `" + key + "`";
        }
      }
    } else {
      throw "Schema Error: You must provide an object";
    }
    config.type = 'Schema';
    return config;
  }

  Schema.prototype.get_type = function(str) {
    var arr, i, parts;
    arr = this.types;
    if (typeof str !== 'string') {
      return false;
    }
    parts = str.split(".");
    i = 0;
    while (i < parts.length) {
      if (arr.hasOwnProperty(parts[i])) {
        arr = arr[parts[i]];
      } else {
        throw 'Schema Error: Could not get a type attributes';
      }
      i++;
    }
    return arr;
  };

  Schema.prototype.exists = function(str) {
    var arr, i, parts;
    arr = this.types;
    if (typeof str !== 'string') {
      return false;
    }
    parts = str.split(".");
    i = 0;
    while (i < parts.length) {
      if (arr.hasOwnProperty(parts[i])) {
        arr = arr[parts[i]];
      } else {
        return false;
      }
      i++;
    }
    if (typeof arr['is_parent'] === 'undefined') {
      return true;
    } else {
      throw "Schema Error: You cannot use a parent schema type `" + str + "`, be more specific e.g: `Person.Age`.";
      return false;
    }
  };

  Schema.prototype.isEmpty = function(obj) {
    var name;
    for (name in obj) {
      return false;
    }
    return true;
  };

  Schema.prototype.types = {
    Schema: function() {},
    Person: {
      is_parent: true,
      "Age": {
        min: 0,
        max: 130
      },
      "Birthday": function() {},
      "Gender": function() {},
      "Last": function() {},
      "First": function() {},
      "Name": function() {},
      "Prefix": function() {}
    },
    guid: function() {
      return chance.guid();
    },
    string: function() {},
    number: function() {},
    object: function() {},
    boolean: function() {}
  };

  return Schema;

})();

module.exports = Schema;
